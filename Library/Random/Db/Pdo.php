<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/3/24
 * Time: 14:44
 */

namespace Random\Db;

use Random\IDatabase;

class Pdo extends Db implements IDatabase
{

    protected $transactionCount = 0;

    function __construct($host, $username, $password, $database, $port = 3306)
    {
        parent::__construct($host, $username, $password, $database, $port = 3306);
        $this->conn = $this->connect($this->host, $this->username, $this->password, $this->database, $this->port);
    }

    function connect($host, $username, $password, $database, $port = 3306)
    {
        if (!isset($this->conn)) {
            $dsn = "mysql:host=$host;dbname=$database";
            $this->conn = new \PDO($dsn, $username, $password);
            if ($this->conn->errorCode() == '00000') {
                die($this->conn->errorInfo()[2]);
            }
            $this->conn->exec('set names utf8');
        }
        return $this->conn;
    }

    public function query($sql)
    {
        $result = parent::query($sql); // TODO: Change the autogenerated stub
        if ($result) {
            $this->_affectedRows = $this->conn->rowCount();
            $this->_fieldCount = $this->conn->columnCount();
            $this->_insertId = $this->conn->lastInsertId();
        } else {
            $this->_error = $this->conn->errorInfo()['2'];
        }
        return $result;
    }

    public function getRow($sql)
    {
        $result = $this->query($sql);
        $result->setFetchMode(\PDO::FETCH_ASSOC);
        $arr = $result->fetch();
        return $arr;
    }

    public function getArray($sql)
    {

        $result = $this->query($sql);
        if ($result) {
            $result->setFetchMode(\PDO::FETCH_ASSOC);
            $arr = $result->fetchAll();
        } else {
            $arr = null;
        }
        return $arr;
    }

    public function beginTransaction()
    {
        if (!$this->transactionCounter++) {
            return parent::beginTransaction();
        }
        $this->exec('SAVEPOINT trans' . $this->transactionCounter);
        return $this->transactionCounter >= 0;
    }

    public function commit()
    {
        if (!--$this->transactionCounter) {
            return parent::commit();
        }
        return $this->transactionCounter >= 0;
    }

    public function rollback()
    {
        if (--$this->transactionCounter) {
            $this->exec('ROLLBACK TO trans' . ($this->transactionCounter + 1));
            return true;
        }
        return parent::rollback();
    }
}
